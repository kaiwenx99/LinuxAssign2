#!/bin/bash
# Specify the interpreting shell for this script

# Check if the script is run as root by comparing root user ID 0 with envionment user ID
# Ref: man bash, /EUID section
if [[ $EUID -ne 0 ]]; then
  echo "Error: Please run this script with root privilege."
  exit 1
# Error handle: Return a non-zero exit code when error happened, user doesn't have privilege to run it
fi

# Initialize an array for storing fail to install packages
failed_packages=()

# Function to install a package
install_package() {
  # '$1' stores the first argument pass into this function
  # '-Q': In pacman, '-Q' queries the local package database.
  # Ref: https://wiki.archlinux.org/title/Pacman
  if ! pacman -Q "$1" &> /dev/null; then
  # Error handle: if package installed already, '-Q' will retrieve the package name and version
  # '&> /dev/null' redirects all output (both standard output and standard error) to /dev/null
    echo "Installing $1 now..."
    if ! pacman -S --noconfirm "$1"; then
    # '-S' synchronize packages.
    # '--noconfirm' skips “Are you sure?” messages when installing packages.
    # Ref: https://man.archlinux.org/man/pacman.8.en
      echo "Error: Failed to install $1."
      # Error handle: If the installation fails, the echo prints messages to inform user
      # Add the name ("$1") of the failed to install package to 'failed_packages' array.
      failed_packages+=("$1")
    fi
  else
  # When 'pacman -Q "$1"' is True, that means this package exists in local package database
    echo "$1 is already installed."
  fi
}

# Loop through each package argument from user input, call install_package() to install each
for package in "$@"; do
# "$@" stores all arguments passed to the script
  install_package "$package"
done

# Handle installation failure
if [[ ${#failed_packages[@]} -gt 0 ]]; then
# If the failed_packages array is not empty, poceed to display user failed packages
# ${#failed_packages[@]}: get the number of elements in failed_packages array
# '-gt 0': if number of elements greater than 0, failure occured
  echo "The following packages failed to install: ${failed_packages[*]}"
  exit 1
  # Error handle: Return a non-zero exit code when error happened,when there are packages can not be installed
else
  echo "Successfully installed all packages you specified."
fi

echo "Packages installation done."